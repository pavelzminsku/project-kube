name: Run Cluster Script

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches: [ "main" ]
  push:
    branches: [ "main" ]

jobs:
  run-cluster-script:
    # if: github.event.pull_request.merged == true
    #runs-on: self-hosted
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    #- name: Install dependencies
    #  run: |
    #    sudo apt-get update
    #    sudo apt-get install -y python3-pip
    #    pip3 install -r requirements.txt

    - name: Get changed files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        else
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        fi
        echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
        echo "$CHANGED_FILES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Check if cluster.json was changed
      id: check-cluster
      run: |
        if echo "${{ env.CHANGED_FILES }}" | grep -q "cluster.json"; then
          echo "cluster_changed=true" >> $GITHUB_ENV
        else
          echo "cluster_changed=false" >> $GITHUB_ENV
        fi

    - name: Run cluster script
      # if: env.cluster_changed == 'true'
      env:
        SECRET: ${{ secrets.SECRET }}
        CLOUD: ${{ secrets.CLOUD }}
        FOLDER: ${{ secrets.FOLDER }}
      run: |
        python3 scripts/cluster.py
    
    - name: Run argocd script
      env:
        DB_PASS: ${{ secrets.DB_PASS }}
        S3_KEY: ${{ secrets.S3_KEY }}
        S3_SECRET: ${{ secrets.S3_SECRET }}
        TLS_KEY: ${{ secrets.TLS_KEY }}
        TLS_CRT: ${{ secrets.TLS_CRT }}
        S3_BUCKET_NC: ${{ secrets.S3_BUCKET_NC }}
        S3_BUCKET_LOKI: ${{ secrets.S3_BUCKET_LOKI }}
      run: |
        /usr/local/bin/kubectl create ns ingress-nginx --dry-run=client -o yaml | /usr/local/bin/kubectl apply -f -
        /usr/local/bin/kubectl create ns monitoring --dry-run=client -o yaml | /usr/local/bin/kubectl apply -f -
        /usr/local/bin/kubectl create ns argocd --dry-run=client -o yaml | /usr/local/bin/kubectl apply -f -
        /usr/local/bin/kubectl create ns app --dry-run=client -o yaml | /usr/local/bin/kubectl apply -f -
        echo $TLS_KEY | base64 -d > tls.key
        echo $TLS_CRT | base64 -d > tls.crt
        /usr/local/bin/kubectl create secret tls retail-consult --cert tls.crt --key tls.key -n ingress-nginx --dry-run=client -o yaml | /usr/local/bin/kubectl apply -f -
        rm tls.key
        rm tls.crt
        /usr/local/bin/kubectl apply -f error-page.yaml
        sed -i "s/\!\!\!S3\_SECRET\!\!\!/$(echo -n $S3_SECRET | base64)/g" secrets.yaml
        sed -i "s/\!\!\!S3\_KEY\!\!\!/$(echo -n $S3_KEY | base64)/g" secrets.yaml
        sed -i "s/\!\!\!DB\_PASS\!\!\!/$(echo -n $DB_PASS | base64)/g" secrets.yaml
        sed -i "s/\!\!\!S3\_BUCKET\_NC\!\!\!/$(echo -n $S3_BUCKET_NC | base64)/g" secrets.yaml
        sed -i "s/\!\!\!S3\_BUCKET\_LOKI\!\!\!/$(echo -n $S3_BUCKET_LOKI | base64)/g" secrets.yaml
        /usr/local/bin/kubectl apply -f secrets.yaml
        rm secrets.yaml
        python3 scripts/argocd.py
